# ====================================================
# –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –º–µ—Ç–æ–¥—ã –≤ python: –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ====================================================

def demo_1():
    # —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –≤ —Å—Ç—Ä–æ–∫—É 
    numbers = [x for x in range(10) if x % 2 == 0]
    print(numbers)

def demo_2():
    # —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –≤ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ –¥–≤–æ–π–Ω–æ–π —Ü–∏–∫–ª
    pairs = [(x, y) for x in range(3) for y in range(3)]
    print(pairs)

def demo_3():
    # —Å–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
    squares = {x: x**2 for x in range(5)}
    unique = {ch for ch in "hello world"}
    print(squares)
    print(unique)

def demo_4():
    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ enumerate
    for i, value in enumerate(["a", "b", "c"], start=1):
        print(i, value)

def demo_5():
    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ zip
    names = ["–ò–≤–∞–Ω", "–ê–Ω—è", "–û–ª–µ–≥"]
    grades = [5, 4, 3]
    for name, grade in zip(names, grades):
        print(name, grade)

def demo_6():
    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π sorted, reversed
    for x in sorted([3, 1, 4, 2]):
        print(x, end=" ")
    print()
    for x in reversed("python"):
        print(x, end="_")
    print()

def demo_7():
    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–∑–æ–≤
    nums = [1, 2, 3, 4, 5, 6]
    print(nums[::-1])
    print(nums[::2])
    print(nums[1::2])
    print(nums[1:2])

# * - tuple
# ** - dict
def greet(*names, **options):
    # names = ("–ê–Ω—è", "–ò–≥–æ—Ä—å")
    # options = {
    #     'greeting': "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", 
    #     'age': 20
    # }
    greeting = options.get("greeting", "–ü—Ä–∏–≤–µ—Ç")
    age = options.get("age", 18)
    for name in names:
        print(f"{greeting}, {name}! –¢–µ–±–µ {age} –ª–µ—Ç")

# greet("–ê–Ω—è", "–ò–≥–æ—Ä—å", "Frank", age=20)

def demo_8():
    # —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å *
    a, b, *rest = [1, 2, 3, 4, 5]
    print(a, b, rest)
    first, *_, last = [10, 20, 30, 40]
    print(first, last)

def demo_9():
    # –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    x, y = 5, 10
    x, y = y, x
    print(x, y)

def demo_10():
    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ f –≤ —Å—Ç—Ä–æ–∫–∞—Ö
    name, age = "–ò–≤–∞–Ω", 20
    print(f"–ü—Ä–∏–≤–µ—Ç, {name.upper()}! –ß–µ—Ä–µ–∑ 5 –ª–µ—Ç —Ç–µ–±–µ –±—É–¥–µ—Ç {age+5}.")

def demo_11():
    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ join
    words = ["Python", "is", "fun"]
    sentence = " ".join(words)
    print(sentence)
    print(sentence.split())

def demo_12():
    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π ord, chr –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ —Å–∞–º–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    print(ord("üêÄ"))
    print(chr(128000))

def demo_13():
    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π all, any
    nums = [2, 4, 6, 8]
    print(all(x % 2 == 0 for x in nums))
    print(any(x > 5 for x in nums))

    print(all([True, False]))
    print(any([True, False]))

def demo_14():
    # zip + *
    pairs = [(1, "a"), (2, "b"), (3, "c")]
    numbers, letters = zip(*pairs)
    print(numbers)
    print(letters)

def demo_17():
    # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Counter –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞
    from collections import Counter

    words = ["apple", "kiwi", "banana", "banana", "banana", "apple", "banana", "apple"]
    counter = Counter(words)
    print(counter)
    print(counter.most_common(1)[0][0])

def demo_18():
    # zip + enumerate
    names = ["–ò–≤–∞–Ω", "–ê–Ω—è", "–û–ª–µ–≥"]
    scores = [90, 85, 70]
    for i, (name, score) in enumerate(zip(names, scores), start=1):
        print(f"{i}. {name}: {score}")

def demo_19():
    # map
    nums = ["1", "2", "3", "4"]
    nums = list(map(int, nums))
    print(nums)


# ========================================
# –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ========================================

# –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def demo_lambda_square():
    square = lambda x: x**2
    print("5¬≤ =", square(5))

def demo_lambda_sum():
    add = lambda a, b: a + b
    print("2 + 3 =", add(2, 3))

def demo_lambda_even_odd():
    check = lambda x: "–¥–∞" if x % 2 == 0 else "–Ω–µ—Ç"
    print("3 ‚Üí", check(3))
    print("10 ‚Üí", check(10))

# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å –º–µ—Ç–æ–¥–∞–º–∏ map, filter, reduce
def demo_lambda_map():
    nums = [1, 2, 3, 4]
    squares = list(map(lambda x: x**2, nums))
    print("squares:", squares)

def demo_lambda_filter():
    nums = [10, 15, 20, 25]
    even = list(filter(lambda x: x % 2 == 0, nums))
    print("–±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞:", even)

def demo_lambda_reduce():
    from functools import reduce

    nums = [1, 2, 3, 4, 5]
    product = reduce(lambda a, b: a * b, nums)
    print("product:", product)

# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ–∫
def demo_lambda_sorted_multi():
    students = [("–ò–≤–∞–Ω", 20), ("–ê–Ω—è", 15), ("–û–ª–µ–≥", 17)]
    print(sorted(students, key=lambda x: x[0]))

def demo_lambda_sorted_dicts():
    people = [
        {"name": "–ò–≤–∞–Ω", "age": 20}, 
        {"name": "–ê–Ω—è", "age": 29}
    ]
    print(sorted(people, key=lambda p: p["age"]))

# –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π 
def demo_lambda_in_dict():

    def func(a, b):
        return a + b

    ops = {
        "add": func,
        "mul": lambda a, b: a * b
    }

    print("add:", ops["add"](2, 3))
    print("mul:", ops["mul"](2, 3))















